# Goes with this post: http://stats.stackexchange.com/a/206345/67822

contr.poly(4)

hsb2 = read.table('http://www.ats.ucla.edu/stat/data/hsb2.csv', header=T, sep=",")
hsb2$readcat<-cut(hsb2$read, 4, ordered = TRUE)
table(hsb2$readcat) 
mean(hsb2$write)
(means = tapply(hsb2$write, hsb2$readcat, mean))

# Manually producing contr.poly(4)
(scores = 1:4)
mean(scores)
(y = scores - mean(scores))
(seq_len(4) - 1)
X = outer(y, seq_len(4) - 1, "^")
(Q = qr(X)$qr)
(z = Q * (row(Q) == col(Q)))
(raw = qr.qy(qr(X), z))
(Z <- sweep(raw, 2L, apply(raw, 2L, function(x) sqrt(sum(x^2))), 
            "/", check.margin = FALSE))




plot(tapply(hsb2$write, hsb2$readcat, mean), pch=15, cex=2, xlab="", 
     ylab="Mean write", xaxt="n", main="Type of Polynomial Relation")
axis(1, at = seq(1,4, by = 1), las=1)




# We are running a simple ANOVA, performed as lm() on ordered explanatory
# variable and we get a coeff for every level of the factor variable.
# Later we see what fits best.

summary(lm(write ~ readcat, hsb2))
coeff = coefficients(lm(write ~ readcat, hsb2))
C = contr.poly(4)

# These are the actual means at each level:

(recovered = c(coeff %*% c(1, C[1,]),
               coeff %*% c(1, C[2,]),
               coeff %*% c(1, C[3,]),
               coeff %*% c(1, C[4,])))
# Perfectly corresponding to the actual values:

(actual = tapply(hsb2$write, hsb2$readcat, mean))

# And the best fitting model is linear:

LINEAR_CONTRAST = c(c(coeff[1] + coeff[2] * C[1,1], 
                      coeff[1] + coeff[2] * C[2,1],
                      coeff[1] + coeff[2] * C[3,1], 
                      coeff[1] + coeff[2] * C[4,1])) 
points(LINEAR_CONTRAST, pch=17, col="firebrick")
lo1 = lm(LINEAR_CONTRAST ~ c(1:4))
x = seq(1, 4, 0.0001)
abline(lm(LINEAR_CONTRAST ~ c(1:4)), col="firebrick", lwd=2)
abline(h=mean(hsb2$write))

QUADRATIC_CONTRAST = c(coeff[1] + coeff[3] * C[1,2], 
                       coeff[1] + coeff[3] * C[2,2], 
                       coeff[1] + coeff[3] * C[3,2], 
                       coeff[1] + coeff[3] * C[4,2])
points(QUADRATIC_CONTRAST, pch=20, col=2, cex=1.5)
lo2 = loess(QUADRATIC_CONTRAST ~ c(1:4))
lines(x, predict(lo2,x), col=2, lwd=2)

CUBIC_CONTRAST = c(coeff[1] + coeff[4] * C[1,3], 
                   coeff[1] + coeff[4] * C[2,3], 
                   coeff[1] + coeff[4] * C[3,3], 
                   coeff[1] + coeff[4] * C[4,3])
points(CUBIC_CONTRAST, pch=19, col=3, cex=1.5)
lo3 = loess(CUBIC_CONTRAST ~ c(1:4))
lines(x, predict(lo3,x), col=3, lwd=2)

legend(1,62,legend=c("Linear","Quadrati","Cubic"),
       col=c("firebrick",2,3),
       lty=1,
       border="", bty="n",cex=0.8)

# Compare to applying .L (linear) coefficient to all contrasts:


plot(tapply(hsb2$write, hsb2$readcat, mean), pch=15, cex=2, xlab="", 
     ylab="Mean write", xaxt="n", main="Type of Polynomial Relation")
axis(1, at = seq(1,4, by = 1), las=1)
LINEAR_CONTRAST = c(c(coeff[1] + coeff[2] * C[1,1], 
                      coeff[1] + coeff[2] * C[2,1],
                      coeff[1] + coeff[2] * C[3,1], 
                      coeff[1] + coeff[2] * C[4,1])) 
points(LINEAR_CONTRAST, pch=17)
lo1 = lm(LINEAR_CONTRAST ~ c(1:4))
x = seq(1, 4, 0.0001)
abline(lm(LINEAR_CONTRAST ~ c(1:4)), col=1)
abline(h=mean(hsb2$write))

QUADRATIC_CONTRAST = c(coeff[1] + coeff[2] * C[1,2], 
                       coeff[1] + coeff[2] * C[2,2], 
                       coeff[1] + coeff[2] * C[3,2], 
                       coeff[1] + coeff[2] * C[4,2])
points(QUADRATIC_CONTRAST, pch=20, col=2)
lo2 = loess(QUADRATIC_CONTRAST ~ c(1:4))
lines(x, predict(lo2,x), col=2)

CUBIC_CONTRAST = c(coeff[1] + coeff[2] * C[1,3], 
                   coeff[1] + coeff[2] * C[2,3], 
                   coeff[1] + coeff[2] * C[3,3], 
                   coeff[1] + coeff[2] * C[4,3])
points(CUBIC_CONTRAST, pch=19, col=3)
lo3 = loess(CUBIC_CONTRAST ~ c(1:4))
lines(x, predict(lo3,x), col=3)

