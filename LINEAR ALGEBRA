###################
##SQUARE MATRICES##
###################
set.seed(0)
library(Matrix)
mat = matrix(runif(9), nrow = 3)
mat
A <- mat
#          [,1]      [,2]      [,3]
#[1,] 0.8966972 0.5728534 0.8983897
#[2,] 0.2655087 0.9082078 0.9446753
#[3,] 0.3721239 0.2016819 0.6607978

# Reduced form:

mat[2,] <- mat[2,] - (  mat[1,]   * mat[2,1]  / mat[1,1]) # This is the elimination step for 2,1 or E21 (step1)

# Notice that at this point mat[2,2] has now changed from the original matrix  - not just [2,1]!

#      [,1]      [,2]      [,3]
# [1,] 0.8966972 0.5728534 0.8983897
# [2,] 0.0000000 0.7385881 0.6786655
# [3,] 0.3721239 0.2016819 0.6607978

mat[3,] <- mat[3,] - (  mat[1,]   * mat[3,1]  / mat[1,1]) # This is the E31 step (step2)

#       [,1]        [,2]      [,3]
# [1,] 0.8966972  0.57285336 0.8983897
# [2,] 0.0000000  0.73858807 0.6786655
# [3,] 0.0000000 -0.03604874 0.2879715

mat[3,] <- mat[3,] - (  mat[2,]   * mat[3,2]  / mat[2,2]) # This is the E32 step. [3,2] (step 3)
#     [,1]      [,2]      [,3]
# [1,] 0.8966972 0.5728534 0.8983897
# [2,] 0.0000000 0.7385881 0.6786655
# [3,] 0.0000000 0.0000000 0.3210956

# This is the U in the LU decomposition:

expand(lu(A))$U

# In the L there are the inverted steps we have taken so far:

expand(lu(A))$L

# Step 1
set.seed(0)
library(Matrix)
mat = matrix(runif(9), nrow = 3)
mat

# 1st row is left and the 2nd row is changed by subt the 1st row x mat[2,1]/mat[1,1]= 0.2960962 
#    1             0                 0
# 0.2960962        1                 0   In LA = U, there would be a minus sign in front of 0.2960962 

mat[2,] <- mat[2,] - (  mat[1,]   * mat[2,1]  / mat[1,1])

# Step 2
# Now the third row will be changed similary using the first row times mat[3,1]/mat[1,1]: 0.4149939
#    1               0                 0
# 0.2960962          1                 1
# 0.4149939    0.2377307               1

mat[3,] <- mat[3,] - (  mat[1,]   * mat[3,1]  / mat[1,1])

# Step 3
# The third row is again changed using the second row times mat[3,2]/mat[2,2] = -0.04880764

#    1                 0                   0
# 0.2960962            1                   1
# 0.4149939    -0.04880764                 1

mat[3,] <- mat[3,] - (  mat[2,]   * mat[3,2]  / mat[2,2])

expand(lu(A))$L

# What about the Reduced row echelon form of A:

# We start here:

#      [,1]      [,2]      [,3]
# [1,] 0.8966972 0.5728534 0.8983897
# [2,] 0.0000000 0.7385881 0.6786655
# [3,] 0.0000000 0.0000000 0.3210956

# and eliminate backwards.

pracma::rref(A)

# Manually:

mat
mat[1, ] <- mat[1, ]/ mat[1, 1]
mat[2, ] <- mat[2, ]/ mat[2, 2]
mat[3, ] <- mat[3, ]/ mat[3, 3]
mat[1, ] <- mat[1, ] - ( mat[2, ] * mat[1, 2] / mat[2, 2])
mat[2, ] <- mat[2, ] - ( mat[3, ] * mat[2, 3] / mat[3, 3])
mat[1, ] <- mat[1, ] - ( mat[3, ] * mat[1, 3] / mat[3, 3])
mat

#=========================================================================================
#=# DETERMINANT: Product of the Pivots of the Upper Triangular U form (which is now `mat`):
#=========================================================================================
  
all.equal(det(A), det(mat), prod(diag(mat))) # [1] TRUE

# [1] 0.2126583

# It is also the Product of the Eigenvalues:

prod(eigen(A)$values)
# [1] 0.2126583-0i

# What if the matrix is symmetric? Can I just multiply the diagonals:

sym <- matrix(c(2,-3,4,1,-3,5,6,7,4,6,-2,0,1,7,0,1), nrow = 4)
sym
#       [,1] [,2] [,3] [,4]
# [1,]    2   -3    4    1
# [2,]   -3    5    6    7
# [3,]    4    6   -2    0
# [4,]    1    7    0    1

prod(diag(sym))      # -20
det(sym)             # 476 I guess not...


lu(sym)$U
#[,1]       [,2]    [,3]        [,4]
#[1,]    2 -3.0      4      1.000000
#[2,]    0  0.5     12      8.500000
#[3,]    0  0.0   -298   -206.000000
#[4,]    0  0.0      0     -1.597315

prod(diag(lu(sym)$U)) # 476

