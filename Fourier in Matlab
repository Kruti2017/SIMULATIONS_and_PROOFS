% From http://rinterested.github.io/statistics/fourier.html and
% http://stackoverflow.com/a/43196792/4089351
% and http://stackoverflow.com/a/43197349/4089351
% circ.png can be found here: https://drive.google.com/file/d/0Bwl-HpVJ_5PeV01SNFJ6LUpGams/view?usp=sharing

Im = imread('circ.png');
pkg load image


Im = rgb2gray(Im);


A = fft2(double(Im));

% ImageJ’s X and Y positions are 0-based whereas Matlab’s indexing is 1-based.
% Incrementing ImageJ’s X position corresponds to incrementing the column index in Matlab, 
% and incrementing ImageJ’s Y position corresponds to incrementing the row index in Matlab, 
% so that an (X,Y) coordinate pair in ImageJ will be found at index (Y+1,X+1) in Matlab.
% ImageJ displays the image with the 0 frequency component in the middle of the image, 
% so measurements are effectively made on the equivalent of fftshift(Im)
% ImageJ scales the 0-255 grayscale values to floating point values in the 0.0-1.0 range 
% (i.e. scaling all values by dividing by 255)

% Correspondence to ImageJ measurement at X = 191, Y = 100:

A = fft2(double(Im) / 255);
Ashifted = fftshift(A);
Ashifted(101,192) % Notice the swapping of X and Y, plus the increase by 1 of both.

i = 101;
j = 192;

center = size(A) / 2 + 1;
dx = (j - center(2)) / size(A,2);
dy = (center(1) - i - 1) / size(A,1);

direction = (atan2(dy, dx))
dir_degrees = direction * (360 / (2*pi)) 
frequency = 1 /sqrt(dx*dx + dy*dy)

%1	0	   106	   106	106	    191	100	    3.735	    23.199
%2	0	 4.628	 4.628	4.628	  191	100	 1	0.000	     0.000
%3	0	19.125	19.125	19.125	191	100	 2	0.000	     0.000
% Theta is              23.199 degrees
% The frequency r is    3.735  pixels/cycle


subplot(131);
h = imshow(Im);
h2 = get(h,'Parent');
set(h2,'YDir','Normal');
axis equal tight;
title("Circle");

subplot(132);
h = imshow(abs(fftshift(A)),[24 100]);
h2 = get(h,'Parent');
set(h2,'YDir','Normal');
axis equal tight;
title("2D FFT Magnitude");

subplot(133);
h = imshow(angle(fftshift(A)),[-pi pi]);
h2 = get(h,'Parent');
set(h2,'YDir','Normal');
axis equal tight;
title("2D FFT Phase");



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% http://www.dspguide.com/ch8/4.htm
% https://www.researchgate.net/post/Can_someone_please_provide_me_some_MATLAB_code_for_image_transforms_2D_DFT

% x = input sequence
% X = dft of sequence
x = [1 2 4 1 2 1 2 2 3 2 3];

N = length(x);    % length of the input vector - in this case 11.
for k = 1 : N     % no. of bins
    X(k) = 0;     % empty vector to collect waves 
    for n = 1 : N % there are as many sinusoidal waves as input elements
        % Each wave is added on the previous: X(k) + ...
        % The corresponding element of the input x(n) is multiplied by...
        % exp{-2pii/N...} We divide the circle 2pi into N segments
        % exp{... (n - 1) (k -1)} We start at zero and go to N - 1 to round up the circle:
        X(k) = X(k) + x(n).*exp(-1i.* 2.* pi.*(n - 1).*(k - 1)./ N);
    end
end

% returns X

f = 0:N-1;
subplot(311)
stem(0:N-1, x)
title('Sequence x (in time domain)')
xlabel('time')
ylabel('Amplitude')
grid;

subplot(323)
stem(f,abs(X))
title('Magnitude of Fourier Coeffients using function')
ylabel('|X|')
grid;

subplot(325)
stem(f,angle(X))
title('Angle of Fourier Coeffients using function')
xlabel('Frequency coefficients')
ylabel('<X')
grid;

subplot(324)
stem(f,abs(fft(x)))
title('Magnitude of Fourier Coeffients using fft function')
ylabel('|X|')
grid;

subplot(326)
stem(f,angle(fft(x)))
title('Angle of Fourier Coeffients using fft function')
xlabel('Frequency coefficients')
ylabel('<X')
grid;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% specam.m Compute the spatial frequency spectrum of a square
%           aperture of side L.
clear all;  % Clear memory; print header

%@ Initialize variables
%
NGrid = 100;            % Number of grid points for plots
xMax = 5;              % Values plotted from x= -xMax to x= xMax
yMax = xMax;           % Values plotted from y= -yMax to y= yMax
for i=1:NGrid
  xPlot(i) = -xMax + (i-1)/(NGrid-1)*(2*xMax); % x values to plot
  yPlot(i) = -yMax + (i-1)/(NGrid-1)*(2*yMax); % y values to plot
end

%@ Loop over all grid points and evaluate E(x,y) on grid
for i=1:NGrid
 y = yPlot(i);
 for j=1:NGrid
   x = xPlot(j);   
 
   %@ Compute amplitude of electric field at the grid point
   EPlot(i,j) = sin(pi*x)*sin(pi*y)/(pi*pi*x*y);
  
 end
end

%@ Plot contours of constant electric potential
clf;  figure(gcf);    % Clear figure; bring figure window forward
mesh(xPlot,yPlot,EPlot);  % Plot electric amplitude in contour/mesh plot
xlabel('x, Spatial frequency');  
ylabel('y, Spatial frequency'); 
zlabel('Spectral amplitude');
title('Fourier Transform of a Square Aperature');
hold off;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

fxy =[1 2 3 9; 8 5 1 2; 9 8 7 2] % a 3 x 4 matrix
sfxy = size(fxy); % determine size of fxy, which is 3 x 4
m = sfxy(1, 1);  % no. of rows of the matrix, which is 3
n = sfxy(1,2);   % no. of columns of the matrix, which is 4
% double summation over u v using f(x ,y) as element   
for u = 1 :1 :m        % begin with row of dft of fxy; u = 1, 2, 3                   
  for v = 1 :1 :n      % col fxy; v = 1, 2, 3, 4                       
    r(u,v) = 0;        % set init to zero; m 3 x 4 matrix of zeros
    for x = 1 :1 :m    % begin summation over x                                                       
      for y = 1 :1 :n  % begin summation over x                                                        
        axy = fxy(x,y)/m/n;  % element xy       
         % keep in mind index x in formula is from 0 but here it starts from 1 so..(x-1)                                                       
         r(u,v) = r(u,v) + axy * cos(2 * pi *(u *(x - 1) / m + v *(y - 1) / n));                                     
       end                                                   
     end                           
 end 
end 
r

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Plotting ideas:

clear
close all
clc
c = 1560; %m/s
rhoK = 1040; %kg/m^3
rhoS = 1;
K1 = 1/(rhoK*c^2);
K2 = 1;
L = 0.05;%m
f1 = 2e6; %hz
f2 = 2e6; %hz
w = 2*pi*f1;
w0 = 2*pi*f2;
k = w*(K1*rhoK)^0.5;
n = 60;
t = linspace(0,3/f1,n); %s
z = linspace(0,L,n); %m
t1 = t*1e9; %ns
z1 = z *100; %cm
A = (exp(1i*(w0-w)*t)+exp(-1i*(w0+w)*t))/(2*(1+exp(2i*k*L)));
B = (exp(1i*(w0-w)*t)+exp(-1i*(w0+w)*t))/(2*(1+exp(-2i*k*L)));
P = ((A.*exp(1i*w*t))'*exp(1i*k*z))+((B.*exp(1i*w*t))'*exp(-1i*k*z));
% P1 = (exp(1i*w*t))'*((A.*exp(1i*k*z))+(B.*exp(-1i*k*z)));
figure()
surf(t1,z1,real(P));
title('High Frequency Sound Wave')
ylabel('space(cm)')
xlabel('time(ns)')
zlabel('Pressure(Pa)')

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% FROM HERE: https://www.youtube.com/watch?v=a7TUIkn3qjY

close all;
clc;
clear all;

%BUILDING UP A FIGURE (A TRIANGLE) WITH 1'S INSIDE AND 0'S OUTSIDE:

figure('Color','w','Units','normalized','OuterPosition',[0 0.05 1 0.95]); % empty canvas
unitary_canvas = 1;               % lattice spacing of 1 physical width and height of 1
tri_sides  = .9 * unitary_canvas; % triangle sides
grid256X = 255;                   % grid with 255 points across
grid256Y = grid256X;              % same height
pix_size_x = unitary_canvas / grid256X;     % cell size
pix_size_y = unitary_canvas /grid256Y;      % cell height
X_px_position = [0: grid256X - 1] * pix_size_x;   % horizontal position of each point
Y_px_position = [0: grid256Y - 1] * pix_size_y;   % vertical position of each point
X_px_position = X_px_position - mean(X_px_position); % centering
Y_px_position = Y_px_position - mean(Y_px_position);
[Y,X] =  meshgrid(Y_px_position,X_px_position);

tri_height = tri_sides * sqrt(3)/2;    % height of an equilateral triangle in relation to sides
tri_ht_cells = round(tri_height / pix_size_y);        % height in cells of the triangle
tri_top_ind = 1 + floor((grid256Y - tri_ht_cells)/2); % floor is rounding. 
% this gives the index of the top triangle.
tri_bottom_ind = tri_top_ind + tri_ht_cells - 1;      % bottom of the triangle

UC = zeros(grid256X, grid256Y);                       % UC = the triangle started off... 

  
  for tri_ht_cells = tri_top_ind : tri_bottom_ind
  width_index = 1 - (tri_ht_cells - tri_top_ind + 1) / (tri_bottom_ind - tri_top_ind + 1); 
  % index for how many cells wide we are
  where_are_we = round(width_index * tri_sides / pix_size_x); 
  % where we are at each altitude level
  nx1 = 1 + floor((grid256X - where_are_we)/2);
  nx2 = nx1 + where_are_we + 1;
  UC(nx1: nx2, tri_ht_cells) = 1; % assigning 1's inside the triangle
  end
\  



subplot(231); % plotting the triangle
hh = imagesc(X_px_position,Y_px_position,UC');
h2 = get(hh,'Parent');
set(h2,'YDir','Normal');
axis equal tight;
colorbar;
title("Unit Cell");
%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%DOING THE FFT THE FAST WAY (BUILT-IN FFT2 2DFT FUNCTION):

A = fftshift(fft2(UC))/(grid256X * grid256Y); 
    % The actual 2D DFT
    % ffshift is to bring FFT values from corner to center
    % / (grid256X * grid256Y) to preven huge coefficients (scaling)
subplot(232); 
hh = imagesc(X_px_position,Y_px_position,real(A'));
h2 = get(hh,'Parent');
set(h2,'YDir','normal');
axis equal tight;
colorbar;
title("FFT2");

% The blue part of the plot is zeroes.
% Zooming to the middle we see the info


% Tuncating the FFT to appreciate the center (where the info is):

hor7grab = 7;       %no. points horizontally to grab
vert7grab = 7;      %no. points vertically
middleX = ceil(grid256X/2); % middle horizontally
middleY = ceil(grid256Y/2); % middle vertically
first_horiz_point = middleX -  floor(hor7grab/2); % first point horiz
last_horiz_point = middleX +  floor(hor7grab/2);  % last point horiz
first_vert_point = middleY -  floor(vert7grab/2); % first point vert
last_vert_point = middleY +  floor(vert7grab/2);

% A was the fft, now AT will stand with fft truncated:

AT = A(first_horiz_point:last_horiz_point, first_vert_point:last_vert_point); 
% AT = truncated FFT
trunc_X_ax = [-floor(hor7grab/2): floor(hor7grab/2)]; % new axis
% -3  -2  -1   0   1   2   3
trunc_Y_ax = [-floor(vert7grab/2) : floor(vert7grab/2)];
% -3  -2  -1   0   1   2   3
subplot(233); 
hh = imagesc(trunc_X_ax, trunc_Y_ax,real(AT'));
h2 = get(hh,'Parent');
set(h2,'YDir','Normal');
axis equal tight;
colorbar;
title("TRUNCATED FFT2");

%Time for the inverse fft again with built-in functions (ifft2):

A = zeros(grid256X,grid256Y); % making the fft all zeroes
A(first_horiz_point:last_horiz_point, first_vert_point:last_vert_point) = AT; 
%everything outside tuncated part is zeros; inside it is simply AT.


UCT = real(ifft2(ifftshift(A))) * (grid256X * grid256Y); 
% unit cell from truncated fft
% we undo shifting and scaling
subplot(233); 
hh = imagesc(X_px_position, Y_px_position,real(UCT'));
h2 = get(hh,'Parent');
set(h2,'YDir','Normal');
axis equal tight;
colorbar;
title("TRUNCATED UNIT CELL");
% blurry because we used only 7 x 7 hor7grab vert7grab

% All done with the fast way!

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% Doing it the slow way:
% Calculate grating vector expansion:
circ_reduced_canvX = 2 * pi * trunc_X_ax / unitary_canvas; % Seven values

% So from side to side we will cover the entire circle.

circ_reduced_canvY = 2 * pi * trunc_Y_ax / unitary_canvas;
% Same for top to bottom

[circ_reduced_canvY, circ_reduced_canvX] = meshgrid(circ_reduced_canvY, circ_reduced_canvX); % Seven values 49 values

%  Let's start with the whole 256 x 256 grid256X, grid256Y from the beginning...

UCT = zeros(grid256X, grid256Y); % new truncated unit cell (unit cell is the triangle)
% UCT is 256 x 256

for vert_1_to_7_in = 1:vert7grab %hor7grab = vert7grab = 7 so it is for loop from 1 to 7
  for horiz_1_to_7_in = 1:hor7grab % for 1 to 7 also
    % Calculate planar grating:
    % The actual values of the triangle don't even come into play, only...
    % the position of the pixels in X and Y

    
    G = exp(1i * (circ_reduced_canvX(horiz_1_to_7_in, vert_1_to_7_in) * X 
                + circ_reduced_canvY(horiz_1_to_7_in, vert_1_to_7_in) * Y));
    

    % [Y,X] =  meshgrid(Y_px_position,X_px_position) = 256 x 256 corresponding to point positions.
    % X is [256 x 256] and Y is also [256 x 256].
    
    % G is [256 x 256]
    
    %ADDING the Planar Grating to reconstruct cell triangle:
    
    UCT = UCT + AT(horiz_1_to_7_in, vert_1_to_7_in) * G; 
    % we update the 256 x 256 matrix 
    % AT is 7 x 7 matrix of complex numbers  and np nq the indices 1:7
    % Noticing that AT is just the core of A, which is calculated above 
    % with fft2 in-built function!!!!
    % We are reconstructing the triangle ONLY with the center of the DFT!!!
    

    %SHOWING TRUNCATED FFT:
    subplot(234);
    hh = imagesc(trunc_X_ax,trunc_Y_ax,real(AT')); % only real part!
    %pa and qa are 7 axis points
    h2 = get(hh, 'Parent');
    set(h2, 'YDir','normal');
    axis equal tight;
    colorbar;
    title('TRUNCATED FFT2');
    hold on;
    x = trunc_X_ax(horiz_1_to_7_in) - 0.5 + [0 1 1 0 0]; %creating box around cells
    y = trunc_Y_ax(vert_1_to_7_in) - 0.5 + [0 0 1 1 0];
    line(x,y, 'Color','k','LineWidth',2);
    hold off;
    
    % Show planar grating:
    subplot(235);
    hh = imagesc(X_px_position,Y_px_position,real(G')); % only real part!
    % X_px_position and Y_px_position are 256-long vectors, and G is 256x256
    h2 = get(hh, 'Parent');
    set(h2, 'YDir','normal');
    axis equal tight;
    colorbar;
    title(['P = ' num2str(trunc_X_ax(horiz_1_to_7_in)) ', Q = ' ...
                  num2str(trunc_Y_ax(vert_1_to_7_in))]);
                  
    % Showing reconstructed cell:
    subplot(236);
    hh = imagesc(X_px_position,Y_px_position,ifftshift(real(UCT'))); % only real part!
    h2 = get(hh, 'Parent');
    set(h2, 'YDir','normal');
    axis equal tight;
    colorbar;
    title('RECONSTRUCTED UNIT CELL');    
                  
                  
    drawnow;
    % Pay attn to the labels:
    % P is the no. strips along x
    % Q is the no. strips along y
    end
end
\

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Work in progress (2 DFT):

% x = input sequence
% X = dft of sequence
x = magic(5);


M = size(x)(1);
N = size(x)(2);
MN = zeros(size(x));    % mat of zeros size of x.
for u = 1 : M     % no. of bins in one direction
    X(u) = 0;     % setting up a counter at zero 
    
    for n = 1 : N % there are as many sinusoidal waves as input elements
        % Each wave is added on the previous: X(k) + ...
        % The corresponding element of the input x(n) is multiplied by...
        % exp{-2pii/N...} We divide the circle 2pi into N segments
        % exp{... (n - 1) (k -1)} We start at zero and go to N - 1 to round up the circle:
        X(k) = X(k) + x(n).*exp(-1i.* 2.* pi.*(n - 1).*(k - 1)./ N);
    end
end

% returns N
