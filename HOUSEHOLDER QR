# Mirroring the qr() function of R through Householder QR decomposition:
# Target: http://stackoverflow.com/q/36512466/4089351
# Notation: http://www.netlib.org/lapack/lug/node69.html
# Thanks to: https://youtu.be/d-yPM-bxREs
# Notation: http://math.stackexchange.com/q/1739445/152225

options(scipen=999)
(X = matrix(c(1,1,1,1,-1.5,-0.5,0.5,1.5,2.25,0.25,0.25, 2.25,-3.275,-0.125,0.125,3.375), 
            nrow=4, byrow=F))


Householder = function(A){
    Q= diag(nrow(A))
    for(r in 1:(nrow(A) - 1)){ 
        # We will apply Householder to progressively smaller parts of the columns in A
        x = A[r:nrow(A), r] 
        # We now get the vector v using the positive norm:
        v = c(sqrt(sum(x^2)) - x[1], - x[2:length(x)])
        # The unit vector perpendicular to the subspace is:
        u = v/sqrt(sum(v^2))
        # The Householder tranformation is:
        I = diag(length(r:nrow(A)))
        Q_minor = I - 2 * (u %*% t(u))
        Q_i  = diag(nrow(A))
        Q_i[r:nrow(A),r:ncol(A)] = Q_minor
        # And we apply the Householder reflection - we left multiply the entire A
        A = round(Q_i %*% A,2)
        Q = round(Q_i %*% Q,2)
    }
    DECOMPOSITION = list("Q"= t(Q), "R"= A)
    return(DECOMPOSITION)
}
(H = Householder(X))


# Comparing to Q from R:
(House = round(qr.Q(qr(X)),2))
t(House[,1])%*%House[,2]
round(qr(X)$qr,2)
